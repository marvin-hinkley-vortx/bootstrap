// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

// scss-docs-start btn-variant-mixin
@mixin button-variant(
	$background,
	$border,
	$color: color-contrast($background),
	$hover-background:
		if(
			$color == $color-contrast-light,
			shade-color($background, $btn-hover-bg-shade-amount),
			tint-color($background, $btn-hover-bg-tint-amount)
		),
	$hover-border:
		if(
			$color == $color-contrast-light,
			shade-color($border, $btn-hover-border-shade-amount),
			tint-color($border, $btn-hover-border-tint-amount)
		),
	$hover-color: color-contrast($hover-background),
	$active-background:
		if(
			$color == $color-contrast-light,
			shade-color($background, $btn-active-bg-shade-amount),
			tint-color($background, $btn-active-bg-tint-amount)
		),
	$active-border:
		if(
			$color == $color-contrast-light,
			shade-color($border, $btn-active-border-shade-amount),
			tint-color($border, $btn-active-border-tint-amount)
		),
	$active-color: color-contrast($active-background),
	$disabled-background: $background,
	$disabled-border: $border,
	$disabled-color: color-contrast($disabled-background)
) {
	$box-shadow-color: rgba(mix($color, $border, 15%), 0.5);

	//Custom properties to be proxied by user
	--#{$variable-prefix}button-bg: #{$background};
	--#{$variable-prefix}button-border: #{$border};
	--#{$variable-prefix}button-hover-bg: #{$hover-background};
	--#{$variable-prefix}button-hover-border: #{$hover-border};
	--#{$variable-prefix}button-active-bg: #{$active-background};
	--#{$variable-prefix}button-active-border: #{$active-border};
	--#{$variable-prefix}button-disabled-bg: #{$disabled-background};
	--#{$variable-prefix}button-disabled-border: #{$disabled-border};
	--#{$variable-prefix}button-box-shadow: #{$box-shadow-color};

	color: $color;
	@include gradient-bg(var(--#{$variable-prefix}button-bg));
	border-color: var(--#{$variable-prefix}button-border);
	@include box-shadow($btn-box-shadow);

	&:hover {
		color: $hover-color;
		@include gradient-bg(var(--#{$variable-prefix}button-hover-bg));
		border-color: var(--#{$variable-prefix}button-hover-border);
	}

	.btn-check:focus + &,
	&:focus {
		color: $hover-color;
		@include gradient-bg(var(--#{$variable-prefix}button-hover-bg));
		border-color: var(--#{$variable-prefix}button-hover-border);
		@if $enable-shadows {
			@include box-shadow(
				$btn-box-shadow,
				0 0 0 $btn-focus-width var(--#{$variable-prefix}button-box-shadow)
			);
		} @else {
			// Avoid using mixin so we can pass custom focus shadow properly
			box-shadow: 0
				0
				0
				$btn-focus-width
				var(--#{$variable-prefix}button-box-shadow);
		}
	}

	.btn-check:checked + &,
	.btn-check:active + &,
	&:active,
	&.active,
	.show > &.dropdown-toggle {
		color: $active-color;
		background-color: var(--#{$variable-prefix}button-active-bg);
		// Remove CSS gradients if they're enabled
		background-image: if($enable-gradients, none, null);
		border-color: var(--#{$variable-prefix}button-active-border);

		&:focus {
			@if $enable-shadows {
				@include box-shadow(
					$btn-active-box-shadow,
					0 0 0 $btn-focus-width var(--#{$variable-prefix}button-box-shadow)
				);
			} @else {
				// Avoid using mixin so we can pass custom focus shadow properly
				box-shadow: 0
					0
					0
					$btn-focus-width
					var(--#{$variable-prefix}button-box-shadow);
			}
		}
	}

	&:disabled,
	&.disabled {
		color: $disabled-color;
		background-color: var(--#{$variable-prefix}button-disabled-bg);
		// Remove CSS gradients if they're enabled
		background-image: if($enable-gradients, none, null);
		border-color: var(--#{$variable-prefix}button-disabled-border);
	}
}
// scss-docs-end btn-variant-mixin

// scss-docs-start btn-outline-variant-mixin
@mixin button-outline-variant(
	$color,
	$color-hover: color-contrast($color),
	$active-background: $color,
	$active-border: $color,
	$active-color: color-contrast($active-background)
) {
	$box-shadow-color: rgba($color, 0.5);

	--#{$variable-prefix}button-outline-border: #{$color};
	--#{$variable-prefix}button-outline-active-bg: #{$color};
	--#{$variable-prefix}button-outline-active-border: #{$color};
	--#{$variable-prefix}button-outline-box-shadow: #{$box-shadow-color};

	color: $color;
	border-color: var(--#{$variable-prefix}button-outline-border);

	&:hover {
		color: $color-hover;
		background-color: var(--#{$variable-prefix}button-outline-active-bg);
		border-color: var(--#{$variable-prefix}button-outline-active-border);
	}

	.btn-check:focus + &,
	&:focus {
		box-shadow: 0 0 0 $btn-focus-width
			var(--#{$variable-prefix}button-outline-box-shadow);
	}

	.btn-check:checked + &,
	.btn-check:active + &,
	&:active,
	&.active,
	&.dropdown-toggle.show {
		color: $active-color;
		background-color: var(--#{$variable-prefix}button-outline-active-bg);
		border-color: var(--#{$variable-prefix}button-outline-active-border);

		&:focus {
			@if $enable-shadows {
				@include box-shadow(
					$btn-active-box-shadow,
					0 0 0 $btn-focus-width
						var(--#{$variable-prefix}button-outline-box-shadow)
				);
			} @else {
				// Avoid using mixin so we can pass custom focus shadow properly
				box-shadow: 0
					0
					0
					$btn-focus-width
					var(--#{$variable-prefix}button-outline-box-shadow);
			}
		}
	}

	&:disabled,
	&.disabled {
		color: $color;
		background-color: transparent;
	}
}
// scss-docs-end btn-outline-variant-mixin

// scss-docs-start btn-size-mixin
@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {
	padding: $padding-y $padding-x;
	@include font-size($font-size);
	// Manually declare to provide an override to the browser default
	@include border-radius($border-radius, 0);
}
// scss-docs-end btn-size-mixin
